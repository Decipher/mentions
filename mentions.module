<?php
/**
 * @file
 * Contains core functions for the Mentions module.
 */

 /**
 * Implements hook_help().
 */
function mentions_help($path = 'admin/help#mentions', $arg) {
  switch ($path) {
    case 'admin/help#mentions':
      $output = file_get_contents(drupal_get_path('module', 'mentions') . '/README.txt');
      return '<pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Implements hook_theme().
 */
function mentions_theme($existing, $type, $theme, $path) {
  return array(
    'mentions' => array(
      'arguments' => array('user' => array()),
    ),
    'mentions_input' => array(
      'arguments' => array('text' => NULL, 'raw' => FALSE),
    ),
  );
}

/**
 * Implements hook_init().
 */
function mentions_init() {
  foreach (module_list() as $module) {
    if (file_exists($file = drupal_get_path('module', 'mentions') . '/modules/' . $module . '.inc')) {
      require_once $file;
    }
  }
}

/**
* Implements hook_filter_info().
*/
function mentions_filter_info() {
  $values = array(
    '!username' => theme_mentions_input('username'),
    '!uid' => theme_mentions_input('#uid'),
  );
  $filters['filter_mentions'] = array(
    'title' => t('Mentions Filter'),
    'description' => t('Converts !username and !uid into a link to the user\'s profile page.', $values),
    'process callback' => '_filter_mentions',
    'settings callback' => '_filter_mentions_settings',
    'tips callback' => '_filter_mentions_tips',
    'cache' => FALSE,
  );
  return $filters;
}

// Filter callbacks.

function _filter_mentions($text, $filter, $format) {

  foreach (mentions_find_users($text) as $match) {
    $text = str_replace($match['text'], theme_mentions($match['user']), $text);
  }

  return $text;
}

/**
* Implements hook_filter_FILTER_settings().
*
* @see mentions_filter_info()
*/
function _filter_mentions_settings($form, &$form_state, $filter, $format, $defaults = array('mentions' => array('input' => array('mentions_input_prefix' => '[@', 'mentions_input_suffix' => ']'), 'output' => array(mentions_output_prefix => '@', 'mentions_output_suffix' => '', 'mentions_output_content' => '[user]'))), $filters) {
  $filter->settings += $defaults;

  $settings = array();
  $settings['mentions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mentions filter'),
    '#collapsible' => TRUE,
    '#description' =>
      t('Define input and output patterns for the Mentions filter.')
      . '<p>' .
        '<strong>' . t('Note:') . '</strong> ' . t('If you do not define an input suffix, usernames containing a space will not work correctly.') . '<br />' .
        '<strong>' . t('Warning:') . '</strong> ' . t('If you do not define an input prefix, usernames containing a space will not work correctly
and you may receive false positives, break HTML elements and your site layout, and add unnecessary server load. It is strongly suggested to use an Input filter.')
      . '</p>'
    ,
  );

  $settings['mentions']['input'] = array(
    '#value' => t('Input') . ':',
  );
  $settings['mentions']['input']['mentions_input_prefix'] = array(
    '#title' => 'Input prefix',
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => variable_get('mentions_input_prefix', '[@'),
    '#required' => TRUE,
  );
  $settings['mentions']['input']['mentions_input_suffix'] = array(
    '#title' => 'Input suffix',
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => variable_get('mentions_input_suffix', ']'),
    '#required' => TRUE,
  );

  $settings['mentions']['output'] = array(
    '#value' => t('Output') . ':',
  );
  $settings['mentions']['output']['mentions_output_prefix'] = array(
    '#title' => 'Output prefix',
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => variable_get('mentions_output_prefix', '@'),
  );
  $settings['mentions']['output']['mentions_output_suffix'] = array(
    '#title' => 'Output suffix',
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => variable_get('mentions_output_suffix', ''),
  );

  // Support for token module.
  if (module_exists('token')) {
    $form['mentions']['output']['mentions_output_content'] = array(
      '#type' => 'textfield',
      '#size' => 20,
      '#default_value' => variable_get('mentions_output_content', '[user]'),
    );
    $form['mentions']['tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Replacement tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => theme('token_help', 'user'),
    );
  }

  return $settings;
}

/**
* Implements hook_filter_FILTER_tips().
*
* @see mentions_filter_info()
*/
function _filter_mentions_tips($filter, $format, $long = FALSE) {
  $values = array(
    '!username' => theme_mentions_input('username'),
    '!uid' => theme_mentions_input('#uid'),
  );
  return t('!username or !uid creates a link to the user\'s profile page.', $values);
}

/**
 * Insert and Remove mentions on node/comment update/insert.
 */
function _mentions_update($type, $mentions, $mid, $auid) {
  // Build array of old mentions.
  $old_users = array();
  $result = db_query(
    "SELECT uid FROM {mentions} WHERE type = '%s' AND mid = %d", $type, $mid
  );
  while ($data = db_fetch_object($result)) {
    $old_users[] = $data->uid;
  }

  // Build array of new mentions.
  $new_users = array();
  foreach ($mentions as $mention) {
    if (!in_array($mention['user']->uid, $new_users)) {
      $new_users[] = $mention['user']->uid;
    }
  }

  // Add new user mentions.
  foreach (array_diff($new_users, $old_users) as $user) {
    db_query(
      "INSERT INTO {mentions} (type, mid, uid, auid, timestamp) VALUES ('%s', %d, %d, %d, %d)",
      $type, $mid, $user, $auid, time()
    );
  }

  // Remove old mentions.
  foreach (array_diff($old_users, $new_users) as $user) {
    db_query(
      "DELETE FROM {mentions} WHERE type = '%s' AND mid = %d AND uid = %d", $type, $mid, $user
    );
  }
}

/**
 * Remove mentions on node/comment deletion.
 */
function _mentions_delete($type, $mid) {
  db_query("DELETE FROM {mentions} WHERE type = '%s' AND mid = %d", $type, $mid);
}

/**
 * Analyze text for [@username] and [@#uid] references.
 *
 * @param $text
 *   Text string for analysis.
 * @return
 *   An array of matched text and user accounts.
 */
function mentions_find_users($text) {
  $users = array();

  $pattern = variable_get('mentions_input_prefix', '[@') != ''
    ? (variable_get('mentions_input_suffix', ']') != ''
      ? '/\B(' . preg_quote(variable_get('mentions_input_prefix', '[@')) . '|' . preg_quote(check_plain(variable_get('mentions_input_prefix', '[@'))) . ')(\#?.*?)(' . preg_quote(variable_get('mentions_input_suffix', ']')) . '|' . preg_quote(check_plain(variable_get('mentions_input_suffix', ']'))) . ')/'
      : '/\B(' . preg_quote(variable_get('mentions_input_prefix', '[@')) . '|' . preg_quote(check_plain(variable_get('mentions_input_prefix', '[@'))) .')(\#?\w*)/')
    : (variable_get('mentions_input_suffix', ']') != ''
      ? '/(\b|\#)(\w*)(' . preg_quote(variable_get('mentions_input_suffix', ']')) . '|' . preg_quote(check_plain(variable_get('mentions_input_suffix', ']'))) . ')/'
      : '/(\b|\#)(\w*)/');

  if (preg_match_all($pattern, $text, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      $user = (drupal_substr($match[2], 0, 1) == '#')
        ? user_load(drupal_substr($match[2], 1))
        : (($match[1] == '#')
          ? user_load($match[2])
          : user_load_by_name($match[2]));

      if (is_object($user)) {
        $users[] = array(
          'text' => $match[0],
          'user' => $user
        );
      }
    }
  }

  return $users;
}

/**
 * Implements hook_views_api.
 * Notifies the Views module that we're compatible with a particular API revision.
 */
function mentions_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'mentions') . '/includes',
  );
}

/**
 * Return a '@username' link to user's profile.
 *
 * @param $user
 *   A Drupal user account.
 */
function theme_mentions($user) {
  $text = !module_exists('token')
    ? $user->name
    : token_replace(variable_get('mentions_output_content', '[user]'), 'user', $user);

  $attributes = array(
    'class' => 'mentions mentions-' . $user->uid,
    'title' => $text,
  );

  return l(variable_get('mentions_output_prefix', '@') . $text . variable_get('mentions_output_suffix', ''), 'user/' . $user->uid, array('attributes' => $attributes));
}