<?php
// $Id$
/**
 * @file
 * Contains core functions for the Mentions module.
 */

/**
 * Implementation of hook_theme().
 */
function mentions_theme($existing, $type, $theme, $path) {
  return array(
    'mentions' => array(
      'arguments' => array('user' => array()),
    ),
    'mentions_input' => array(
      'arguments' => array('text' => NULL),
    ),
    'mentions_filter_settings' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Implementation of hook_filter_tips().
 */
function mentions_filter_tips($delta, $format, $long = FALSE) {
  return t("!username or !uid creates a link the user's profile page.", array('!username' => theme('mentions_input', 'username'), '!uid' => theme('mentions_input', '#uid')));
}

/**
 * Implementation of hook_filter().
 */
function mentions_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t("Mentions filter"));

    case 'description':
      return t("Converts !username and !uid into a link the user's profile page.", array('!username' => theme('mentions_input', 'username'), '!uid' => theme('mentions_input', '#uid')));

    case 'process':
      foreach (mentions_find_users($text) as $match) {
        $text = str_replace($match['text'], theme('mentions', $match['user']), $text);
      }

      return $text;

    case 'settings':
      $form = array();

      $form['mentions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Mentions filter'),
        '#collapsible' => TRUE,
        '#theme' => 'mentions_filter_settings',
        '#description' =>
          t('Define input and output patterns for the Mentions filter.') .'<br />'.
          '<strong>'. t('Note:') .'</strong> '. t('If you do not define an input suffix, usernames containing a space will not work correctly.')
        ,
      );

      $form['mentions']['input'] = array(
        '#value' => t('Input') .':',
      );
      $form['mentions']['input']['mentions_input_prefix'] = array(
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => variable_get('mentions_input_prefix', '[@'),
      );
      $form['mentions']['input']['mentions_input_suffix'] = array(
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => variable_get('mentions_input_suffix', ']'),
      );

      $form['mentions']['output'] = array(
        '#value' => t('Output') .':',
      );
      $form['mentions']['output']['mentions_output_prefix'] = array(
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => variable_get('mentions_output_prefix', '@'),
      );
      $form['mentions']['output']['mentions_output_suffix'] = array(
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => variable_get('mentions_output_suffix', ''),
      );

      // Support for token module.
      if (module_exists('token')) {
        $form['mentions']['output']['mentions_output_content'] = array(
          '#type' => 'textfield',
          '#size' => 20,
          '#default_value' => variable_get('mentions_output_content', '[user]'),
        );
        $form['mentions']['tokens'] = array(
          '#type' => 'fieldset',
          '#title' => t('Replacement tokens'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#description' => theme('token_help', 'user'),
        );
      }

      return $form;

    default:
      return $text;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function mentions_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      _mentions_update(mentions_find_users($node->body), $node->uid, $node->nid);
      break;

    case 'delete':
      _mentions_delete($node->nid);
      break;
  }
}

/**
 * Implementation of hook_comment().
 */
function mentions_comment(&$a1, $op) {
  switch ($op) {
    case 'publish':
      _mentions_update(mentions_find_users($a1['comment']), $a1['uid'], $a1['nid'], $a1['cid']);
      break;

    case 'delete':
      _mentions_delete($a1->nid, $a1->cid);
      break;
  }
}

/**
 * Insert and Remove mentions on node/comment update/insert.
 */
function _mentions_update($mentions, $auid, $nid, $cid = NULL) {
  // Build array of old mentions.
  $old_users = array();
  $result = db_query(
    "SELECT uid FROM {mentions} WHERE nid = %d AND cid ". (is_null($cid) ? "IS NULL" : "= %d"), $nid, $cid
  );
  while ($data = db_fetch_object($result)) {
    $old_users[] = $data->uid;
  }

  // Build array of new mentions.
  $new_users = array();
  foreach ($mentions as $mention) {
    if (!in_array($mention['user']->uid, $new_users)) {
      $new_users[] = $mention['user']->uid;
    }
  }

  // Add new user mentions.
  foreach (array_diff($new_users, $old_users) as $user) {
    db_query(
      "INSERT INTO {mentions} (uid, auid, nid, timestamp". (!is_null($cid) ? ", cid" : "") .")
      VALUES (%d, %d, %d, %d". (!is_null($cid) ? ", %d" : "") .")", $user, $auid, $nid, time(), $cid
    );
  }

  // Remove old mentions.
  foreach (array_diff($old_users, $new_users) as $user) {
    db_query(
      "DELETE FROM {mentions} WHERE uid = %d AND nid = %d". (!is_null($cid) ? " AND cid = %d" : ""), $user, $nid, $cid
    );
  }
}

/**
 * Remove mentions on node/comment deletion.
 */
function _mentions_delete($nid, $cid = NULL) {
  db_query("DELETE FROM {mentions} WHERE nid = %d". (!is_null($cid) ? " AND cid = %d" : ""), $nid, $cid);
}

/**
 * Analyze text for [@username] and [@#uid] references.
 *
 * @param $text
 *   Text string for analysis.
 * @return
 *   An array of matched text and user accounts.
 */
function mentions_find_users($text) {
  $users = array();

  $pattern = variable_get('mentions_input_suffix', ']') != ''
    ? '/\B('. preg_quote(variable_get('mentions_input_prefix', '[@')) .'|'. preg_quote(check_plain(variable_get('mentions_input_prefix', '[@'))) .')(\#?.*?)('. preg_quote(variable_get('mentions_input_suffix', ']')) .'|'. preg_quote(check_plain(variable_get('mentions_input_suffix', ']'))) .')/'
    : '/\B('. preg_quote(variable_get('mentions_input_prefix', '[@')) .'|'. preg_quote(check_plain(variable_get('mentions_input_prefix', '[@'))) .')(\#?\w*)/';

  if (preg_match_all($pattern, $text, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      $user = (drupal_substr($match[2], 0, 1) == '#')
        ? user_load(drupal_substr($match[2], 1))
        : user_load(array('name' => $match[2]));

      if (is_object($user)) {
        $users[] = array(
          'text' => $match[0],
          'user' => $user
        );
      }
    }
  }

  return $users;
}

/**
 * Implementation of hook_views_api.
 * Notifies the Views module that we're compatible with a particular API revision.
 */
function mentions_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'mentions') .'/includes',
  );
}

/**
 * Return a '@username' link to user's profile.
 *
 * @param $user
 *   A Drupal user account.
 */
function theme_mentions($user) {
  $attributes = array(
    'class' => 'mentions mentions-'. $user->uid,
    'title' => $user->name,
  );

  $text = !module_exists('token')
    ? $user->name
    : token_replace(variable_get('mentions_output_content', '[user]'), 'user', $user);

  return l(variable_get('mentions_output_prefix', '@') . $text . variable_get('mentions_output_suffix', ''), 'user/'. $user->uid, array('attributes' => $attributes));
}

/**
 * Return mentions input format.
 *
 * @param $text
 *   Text to be displayed as mentions input format.
 */
function theme_mentions_input($text) {
  return variable_get('mentions_input_prefix', '[@') . $text . variable_get('mentions_input_suffix', ']');
}

function theme_mentions_filter_settings($form) {
  global $user;

  $header = array('', t('Prefix'), t('Content'), t('Suffix'), t('Example'));
  $rows = array();

  $content = array(
    'input' => $user->name .'<br />'.
               '#'. $user->uid,
    'output' => !module_exists('token') ? $user->name : drupal_render($form['output']['mentions_output_content']),
  );

  $details = array(
    'input' => theme('mentions_input', $user->name) .'<br />'.
               theme('mentions_input', '#'. $user->uid),
    'output' => theme('mentions', $user),
  );

  foreach (element_children($form) as $element) {
    if ($element == 'tokens') {
      continue;
    }

    $rows[] = array(
      '<strong>'. $form[$element]['#value'] .'</strong>',
      drupal_render($form[$element]['mentions_'. $element .'_prefix']),
      $content[$element],
      drupal_render($form[$element]['mentions_'. $element .'_suffix']),
      $details[$element],
    );
  }

  $output = theme('table', $header, $rows);
  if (module_exists('token')) {
    $output .= drupal_render($form['tokens']);
  }

  return $output;
}
